<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>字符编码</title>
      <link href="/60387930-706e-11ec-b266-257478f5c4cf/"/>
      <url>/60387930-706e-11ec-b266-257478f5c4cf/</url>
      
        <content type="html"><![CDATA[<p>js <a href="https://www.ruanyifeng.com/blog/2007/10/ascii_unicode_and_utf-8.html">encode &amp; decode</a></p><ol><li> form enctype</li></ol><ul><li>  application/x-www-form-urlencoded 在发送前编码所有字符（默认）</li><li>  multipart/form-data 不对字符编码，在使用包含文件上传控件的表单时，必须使用该值。</li><li>  text/plain 空格转换为 “+” 加号，但不对特殊字符编码。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;form_action.asp&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;text/plain&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>First name: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;fname&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Last name: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;lname&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Submit&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li> <a href="https://tool.oschina.net/commons?type=4">ascii</a></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;AB&#x27;</span>.<span class="title function_">charCodeAt</span>(<span class="number">0</span>) <span class="comment">// 65</span></span><br><span class="line"><span class="title class_">String</span>.<span class="title function_">fromCharCode</span>(<span class="number">65</span>) <span class="comment">// &#x27;A&#x27;</span></span><br></pre></td></tr></table></figure><ol start="3"><li> <a href="http://ilucas.me/2015/08/25/es6-unicode-regex/">unicode</a></li></ol><p><img src="./imgs/bg2014121104.png"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;😄&#x27;</span>.<span class="property">length</span>); <span class="comment">// 2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;𝒳&#x27;</span>.<span class="property">length</span>); <span class="comment">// 2</span></span><br><span class="line"><span class="comment">// Note: `a` is U+0061 LATIN SMALL LETTER A, a BMP symbol.</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="regexp">/\u&#123;61&#125;/u</span>.<span class="title function_">test</span>(<span class="string">&#x27;a&#x27;</span>));</span><br><span class="line"><span class="comment">// → true</span></span><br><span class="line"><span class="comment">// [Note: `𝌆` is U+1D306 TETRAGRAM FOR CENTRE, an astral symbol](http://ilucas.me/2015/08/25/es6-unicode-regex/).</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="regexp">/\u&#123;1D306&#125;/u</span>.<span class="title function_">test</span>(<span class="string">&#x27;𝌆&#x27;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="regexp">/\u&#123;1D306&#125;/u</span>.<span class="title function_">test</span>(<span class="string">`\u&#123;1D306&#125;`</span>)); 这样就可以打印这个unicode字符了</span><br><span class="line"><span class="comment">// → true</span></span><br></pre></td></tr></table></figure><ol start="4"><li> utf-8</li></ol><ol start="5"><li> Base64</li></ol><ul><li>  atob() 函数能够解码通过base-64编码的字符串数据。</li><li>  btoa() 函数能够从二进制数据“字符串”创建一个base-64编码的ASCII字符串。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">btoa</span>(<span class="string">&#x27;name=1234&#x27;</span>) <span class="comment">// &#x27;bmFtZT0xMjM0&#x27;</span></span><br><span class="line"><span class="title function_">atob</span>(<span class="string">&#x27;bmFtZT0xMjMzNA==&#x27;</span>) <span class="comment">// &#x27;name=12334&#x27;</span></span><br></pre></td></tr></table></figure><ol start="6"><li>Data URLs<blockquote><p>data:[<mediatype>][;base64],<data></p></blockquote></li></ol><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data:text/plain;base64,SGVsbG8sIFdvcmxkIQ==</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>事件循环</title>
      <link href="/9ba4ea40-6096-11ec-8aec-5da075fe55e4/"/>
      <url>/9ba4ea40-6096-11ec-8aec-5da075fe55e4/</url>
      
        <content type="html"><![CDATA[<h3 id="Event-Loop"><a href="#Event-Loop" class="headerlink" title="Event Loop"></a><a href="https://html.spec.whatwg.org/multipage/webappapis.html#event-loop-processing-model">Event Loop</a></h3><h4 id="浏览器"><a href="#浏览器" class="headerlink" title="浏览器"></a><a href="https://cloud.tencent.com/developer/article/1533889">浏览器</a></h4><p>在浏览器端关于事件循环有两个概念：一个是 Macro Task 也称作 Task Queue，一个是 Micro Task。</p><p>Macrotasks 包含了解析 HTML、生成 DOM、执行主线程 JS 代码和其他事件如 页面加载、输入、网络事件、定时器事件等。从浏览器的角度，Macrotask 代表的是一些离散的独立的工作。</p><p>常见应用<br>setTimeout, setInterval, setImmediate, requestAnimationFrame, I/O, UI rendering</p><p>Microtasks 则是为了完成一些更新应用程序状态的较小的任务，如处理 Promise 的回调和 DOM 的修改，以便让这些任务在浏览器重新渲染之前执行。Microtask 应该以异步的方式尽快执行，所以它们的开销比 Macrotask 要小，并且可以使我们在 UI 重新渲染之前执行，避免了不必要的 UI 渲染。</p><p>常见应用<br>process.nextTick, Promises, Object.observe, MutationObserver</p><p><a href="https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/">code show</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;script start&#x27;</span>);</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;setTimeout&#x27;</span>);</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">resolve</span>()</span><br><span class="line">  .<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;promise1&#x27;</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;promise2&#x27;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;script end&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// script start</span></span><br><span class="line"><span class="comment">// script end</span></span><br><span class="line"><span class="comment">// promise1</span></span><br><span class="line"><span class="comment">// promise2</span></span><br><span class="line"><span class="comment">// setTimeout</span></span><br></pre></td></tr></table></figure><p>try it</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;start&#x27;</span>)</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;setTimeout&#x27;</span>)</span><br><span class="line">&#125;, <span class="number">0</span>)</span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">resolve</span>().<span class="title function_">then</span>(<span class="function">()=&gt;</span>&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;promise1&#x27;</span>)&#125;).<span class="title function_">then</span>(<span class="function">()=&gt;</span>&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;promise2&#x27;</span>)&#125;)</span><br><span class="line"><span class="keyword">const</span> timer = <span class="built_in">setInterval</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;setInterval&#x27;</span>)</span><br><span class="line">  <span class="title class_">Promise</span>.<span class="title function_">resolve</span>().<span class="title function_">then</span>(<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;promise 5&#x27;</span>))</span><br><span class="line">  <span class="built_in">clearInterval</span>(timer)</span><br><span class="line">&#125;, <span class="number">0</span>)</span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">resolve</span>().<span class="title function_">then</span>(<span class="function">()=&gt;</span>&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;promise3&#x27;</span>)&#125;).<span class="title function_">then</span>(<span class="function">()=&gt;</span>&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;promise4&#x27;</span>)&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;end&#x27;</span>)</span><br><span class="line"><span class="comment">// start</span></span><br><span class="line"><span class="comment">// end</span></span><br><span class="line"><span class="comment">// promise1</span></span><br><span class="line"><span class="comment">// promise3</span></span><br><span class="line"><span class="comment">// promise2</span></span><br><span class="line"><span class="comment">// promise4</span></span><br><span class="line"><span class="comment">// setTimeout</span></span><br><span class="line"><span class="comment">// setInterval</span></span><br><span class="line"><span class="comment">// promise 5</span></span><br></pre></td></tr></table></figure><h4 id="Node"><a href="#Node" class="headerlink" title="Node"></a>Node</h4><p>┌───────────────────────────┐<br>┌─&gt;│           timers          │<br>│  └─────────────┬─────────────┘<br>│  ┌─────────────┴─────────────┐<br>│  │     pending callbacks     │<br>│  └─────────────┬─────────────┘<br>│  ┌─────────────┴─────────────┐<br>│  │       idle, prepare       │<br>│  └─────────────┬─────────────┘      ┌───────────────┐<br>│  ┌─────────────┴─────────────┐      │   incoming:   │<br>│  │           poll            │&lt;─────┤  connections, │<br>│  └─────────────┬─────────────┘      │   data, etc.  │<br>│  ┌─────────────┴─────────────┐      └───────────────┘<br>│  │           check           │<br>│  └─────────────┬─────────────┘<br>│  ┌─────────────┴─────────────┐<br>└──┤      close callbacks      │<br>   └───────────────────────────┘</p><p><img src="./imgs/node-loop.awebp"></p><p>┌───────────────────────────┐<br>┌─&gt;│           timers          │<br>│  └─────────────┬─────────────┘<br>│           nextTickQueue<br>│  ┌─────────────┴─────────────┐<br>│  │     pending callbacks     │<br>│  └─────────────┬─────────────┘<br>│           nextTickQueue<br>│  ┌─────────────┴─────────────┐<br>|  |     idle, prepare         │<br>|  └─────────────┬─────────────┘<br>nextTickQueue     nextTickQueue<br>|  ┌─────────────┴─────────────┐<br>|  │           poll            │<br>│  └─────────────┬─────────────┘<br>│           nextTickQueue<br>│  ┌─────────────┴─────────────┐<br>│  │           check           │<br>│  └─────────────┬─────────────┘<br>│           nextTickQueue<br>│  ┌─────────────┴─────────────┐<br>└──┤       close callbacks     │<br>└───────────────────────────┘</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;start&#x27;</span>)</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;setTimeout&#x27;</span>)</span><br><span class="line">&#125;, <span class="number">0</span>)</span><br><span class="line"><span class="title function_">setImmediate</span>(<span class="function">()=&gt;</span>&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;setImmediate&#x27;</span>)&#125;)</span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">resolve</span>().<span class="title function_">then</span>(<span class="function">()=&gt;</span>&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;promise1&#x27;</span>)&#125;).<span class="title function_">then</span>(<span class="function">()=&gt;</span>&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;promise2&#x27;</span>)&#125;)</span><br><span class="line"><span class="keyword">const</span> timer = <span class="built_in">setInterval</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;setInterval&#x27;</span>)</span><br><span class="line">  <span class="title class_">Promise</span>.<span class="title function_">resolve</span>().<span class="title function_">then</span>(<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;promise5&#x27;</span>))</span><br><span class="line">  <span class="built_in">clearInterval</span>(timer)</span><br><span class="line">&#125;, <span class="number">0</span>)</span><br><span class="line">process.<span class="title function_">nextTick</span>(<span class="function">()=&gt;</span>&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;nextTick&#x27;</span>)&#125;)</span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">resolve</span>().<span class="title function_">then</span>(<span class="function">()=&gt;</span>&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;promise3&#x27;</span>)&#125;).<span class="title function_">then</span>(<span class="function">()=&gt;</span>&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;promise4&#x27;</span>)&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;end&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// start</span></span><br><span class="line"><span class="comment">// end</span></span><br><span class="line"><span class="comment">// promise1</span></span><br><span class="line"><span class="comment">// promise3</span></span><br><span class="line"><span class="comment">// promise2</span></span><br><span class="line"><span class="comment">// promise4</span></span><br><span class="line"><span class="comment">// setImmediate 比 setTimeout 早</span></span><br><span class="line"><span class="comment">// setTimeout</span></span><br><span class="line"><span class="comment">// setInterval</span></span><br><span class="line"><span class="comment">// promise5</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>数据请求</title>
      <link href="/e6dad790-6073-11ec-8062-8dea7659a7ab/"/>
      <url>/e6dad790-6073-11ec-8062-8dea7659a7ab/</url>
      
        <content type="html"><![CDATA[<ol><li> <a href="https://segmentfault.com/a/1190000004322487">new XMLHttpRequest</a></li></ol><blockquote><p>灵活的 http 请求构造器</p></blockquote><ul><li>  status</li><li>  error</li><li>  timeout</li><li>  formData</li><li>  request/response</li><li>  sync/async</li></ul><p>最基本的 HTTP 请求代码片段</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>()</span><br><span class="line">xhr.<span class="property">timeout</span> = <span class="number">1000</span></span><br><span class="line">xhr.<span class="title function_">addEventListener</span>(<span class="string">&quot;load&quot;</span>, <span class="keyword">function</span> <span class="title function_">onload</span>(<span class="params"></span>)&#123;&#125;)</span><br><span class="line">xhr.<span class="title function_">addEventListener</span>(<span class="string">&#x27;error&#x27;</span>,<span class="keyword">function</span> <span class="title function_">onerror</span>(<span class="params"></span>)&#123;&#125;)</span><br><span class="line">xhr.<span class="title function_">addEventListener</span>(<span class="string">&#x27;timeout&#x27;</span>,<span class="keyword">function</span> <span class="title function_">ontimeout</span>(<span class="params"></span>)&#123;&#125;)</span><br><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;https://www.example.org/example.txt&quot;</span>,<span class="literal">true</span>)</span><br><span class="line">xhr.<span class="title function_">send</span>()</span><br></pre></td></tr></table></figure><p>结合 <a href="https://zh.javascript.info/formdata">formData</a> 发送数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>()</span><br><span class="line"><span class="keyword">const</span> data = <span class="keyword">new</span> <span class="title class_">FormData</span>()</span><br><span class="line">data.<span class="title function_">set</span>(<span class="string">&#x27;id&#x27;</span>,<span class="string">&#x27;10001&#x27;</span>)</span><br><span class="line">data.<span class="title function_">append</span>(<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;hello world&#x27;</span>)</span><br><span class="line">data.<span class="title function_">append</span>(<span class="string">&#x27;addr&#x27;</span>,<span class="string">&#x27;test world&#x27;</span>)</span><br><span class="line">xhr.<span class="property">timeout</span> = <span class="number">1000</span></span><br><span class="line">xhr.<span class="title function_">addEventListener</span>(<span class="string">&quot;load&quot;</span>, <span class="keyword">function</span> <span class="title function_">onload</span>(<span class="params"></span>)&#123;&#125;)</span><br><span class="line">xhr.<span class="title function_">addEventListener</span>(<span class="string">&#x27;error&#x27;</span>,<span class="keyword">function</span> <span class="title function_">onerror</span>(<span class="params"></span>)&#123;&#125;)</span><br><span class="line">xhr.<span class="title function_">addEventListener</span>(<span class="string">&#x27;timeout&#x27;</span>,<span class="keyword">function</span> <span class="title function_">ontimeout</span>(<span class="params"></span>)&#123;&#125;)</span><br><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&quot;POST&quot;</span>, <span class="string">&quot;https://www.example.org/example.txt&quot;</span>,<span class="literal">true</span>)</span><br><span class="line">xhr.<span class="title function_">send</span>(data)</span><br></pre></td></tr></table></figure><ul><li>  在哪可以看到 formData 数据，在 network的 可以查看请求有个 Content-Type: multipart/form-data; boundary=—-WebKitFormBoundary4QTU9gLJlwuu2vTn，然后在 PayLoad 可以看到对应的 formData 数据</li><li>  formData 必须是 POST 方式</li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">------WebKitFormBoundary4QTU9gLJlwuu2vTn</span><br><span class="line">Content-Disposition: form-data; name=&quot;id&quot;</span><br><span class="line"></span><br><span class="line">10001</span><br><span class="line">------WebKitFormBoundary4QTU9gLJlwuu2vTn</span><br><span class="line">Content-Disposition: form-data; name=&quot;name&quot;</span><br><span class="line"></span><br><span class="line">hello world</span><br><span class="line">------WebKitFormBoundary4QTU9gLJlwuu2vTn</span><br><span class="line">Content-Disposition: form-data; name=&quot;addr&quot;</span><br><span class="line"></span><br><span class="line">test world</span><br><span class="line">------WebKitFormBoundary4QTU9gLJlwuu2vTn--</span><br></pre></td></tr></table></figure><p>Node Koa framework 的中间件 @koa/multer 支持 formData 解析</p><ol start="2"><li> <a href="https://zh.javascript.info/fetch">Fetch</a></li></ol><p>header、response、request</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">fetch</span>(<span class="string">&#x27;http://example.com/movies.json&#x27;</span>)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">response</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> response.<span class="title function_">json</span>();</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">myJson</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(myJson);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><ul><li>  header</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> content = <span class="string">&#x27;Hello World&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> myHeaders = <span class="keyword">new</span> <span class="title class_">Headers</span>();</span><br><span class="line">myHeaders.<span class="title function_">append</span>(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;text/plain&#x27;</span>);</span><br><span class="line">myHeaders.<span class="title function_">append</span>(<span class="string">&#x27;Content-Length&#x27;</span>, content.<span class="property">length</span>.<span class="title function_">toString</span>());</span><br><span class="line">myHeaders.<span class="title function_">append</span>(<span class="string">&#x27;X-Custom-Header&#x27;</span>, <span class="string">&#x27;ProcessThisImmediately&#x27;</span>);</span><br></pre></td></tr></table></figure><ul><li>  request</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myHeaders = <span class="keyword">new</span> <span class="title class_">Headers</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> myRequest = <span class="keyword">new</span> <span class="title class_">Request</span>(<span class="string">&#x27;flowers.jpg&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line">  <span class="attr">headers</span>: myHeaders,</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&#x27;cors&#x27;</span>,</span><br><span class="line">  <span class="attr">cache</span>: <span class="string">&#x27;default&#x27;</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="title function_">fetch</span>(myRequest)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> response.<span class="title function_">blob</span>())</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function"><span class="params">myBlob</span> =&gt;</span> &#123;</span><br><span class="line">    myImage.<span class="property">src</span> = <span class="variable constant_">URL</span>.<span class="title function_">createObjectURL</span>(myBlob);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><ul><li>  response</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myBody = <span class="keyword">new</span> <span class="title class_">Blob</span>();</span><br><span class="line"></span><br><span class="line"><span class="title function_">addEventListener</span>(<span class="string">&#x27;fetch&#x27;</span>, <span class="function"><span class="params">event</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// ServiceWorker intercepting a fetch</span></span><br><span class="line">  event.<span class="title function_">respondWith</span>(</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Response</span>(myBody, &#123;</span><br><span class="line">      <span class="attr">headers</span>: &#123; <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;text/plain&#x27;</span> &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  );</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>  fetch的取消比较隐蔽，但可以借助 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/AbortController/abort">AbortController.abort()</a></li><li>  Response 提供了多种基于 promise 的方法，来以不同的格式访问 body,我们只能选择一种读取 body 的方法</li></ul><ol start="3"><li> new Image</li></ol><ul><li>  单点发送</li><li>  不需要挂载 DOM</li><li>  回调简单</li><li>  async</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> logger = <span class="keyword">new</span> <span class="title class_">Image</span>()</span><br><span class="line">logger.<span class="property">src</span> = <span class="string">&#x27;https://abc.com/trace?name=id&amp;time=2022&#x27;</span></span><br><span class="line">logger.<span class="property">onload</span> = <span class="function"><span class="params">e</span> =&gt;</span>&#123;&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li> JSONP</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      receive <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;qwerty&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">callfun</span>(<span class="params">data</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;qwerty&#x27;</span>).<span class="property">innerHTML</span> = data;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;http://127.0.0.1:10010/js?call=callfun&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Controller</span> = <span class="built_in">require</span>(<span class="string">&#x27;egg&#x27;</span>).<span class="property">Controller</span>;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">JsonpController</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Controller</span> &#123;</span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">index</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; ctx &#125; = <span class="variable language_">this</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(ctx.<span class="property">query</span>);</span><br><span class="line">    ctx.<span class="title function_">set</span>(<span class="string">&#x27;content-type&#x27;</span>, <span class="string">&#x27;text/javascript&#x27;</span>);</span><br><span class="line">    ctx.<span class="property">body</span> = ctx.<span class="property">query</span>.<span class="property">call</span> + <span class="string">&#x27;(&quot;nihao&quot;)&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li> window.location.href</li><li> window.open</li><li> form.submit</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>事件处理</title>
      <link href="/7873c000-6073-11ec-b012-49e6e10048ce/"/>
      <url>/7873c000-6073-11ec-b012-49e6e10048ce/</url>
      
        <content type="html"><![CDATA[<p>JavaScript是运行在浏览器端的且是单线程运行的，为了保障DOM渲染和用户操作不相互阻塞，浏览器内核设计了事件机制。比如用户点击了按钮、填写了表单多是可以通过事件监听到并处理的。当然这些事件有一些是浏览器内置的大家可以开箱即用，也允许开发者自定义事件。</p><h3 id="EventTarget-接口"><a href="#EventTarget-接口" class="headerlink" title="EventTarget 接口"></a>EventTarget 接口</h3><p>DOM 节点的事件的监听和触发都定义在eventTarget接口。很多对象都实现了这个接口，还有一些浏览器内置对象如 XMLHttpRequest 等也实现了该接口，该接口主要提供三个实例方法。</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>addEventListener</td><td>绑定事件的监听函数</td></tr><tr><td>removeEventListener</td><td>移除事件的监听函数</td></tr><tr><td>dispatchEvent</td><td>触发事件</td></tr></tbody></table>    <iframe name="event" module="hexo-eb7d3" frameborder="0" width="100%"></iframe>    <script type="text/javascript" id="hexo-eb7d3">      (function(){        let ifr = document.querySelector('iframe[module=hexo-eb7d3]')        const url = URL.createObjectURL(new Blob([unescape("%3C%21DOCTYPE%20html%3E%3Chtml%20lang%3D%22en%22%20dir%3D%22ltr%22%3E%3Chead%3E%0A%20%20%20%20%3Cmeta%20charset%3D%22utf-8%22%3E%0A%20%20%20%20%3Ctitle%3E%u4E8B%u4EF6%u5904%u7406%3C/title%3E%0A%20%20%3C/head%3E%0A%20%20%3Cbody%3E%0A%20%20%20%20%3Csection%20class%3D%22module%20event%22%3E%0A%20%20%20%20%20%20%3Cbutton%20type%3D%22button%22%20name%3D%22button%22%3E%u70B9%u51FB%3C/button%3E%0A%20%20%20%20%20%20%3Cscript%20type%3D%22text/javascript%22%3E%0A%20%20%20%20%20%20%20%20const%20btn%20%3D%20document.querySelector%28%22button%5Bname%3Dbutton%5D%22%29%0A%20%20%20%20%20%20%20%20btn.addEventListener%28%27click%27%2C%20e%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20%20%20console.log%28e.timeStamp%29%0A%20%20%20%20%20%20%20%20%7D%2C%20false%29%0A%20%20%20%20%20%20%3C/script%3E%0A%20%20%20%20%3C/section%3E%0A%20%20%20%20%0A%20%20%0A%3C/body%3E%3C/html%3E")], {          type: 'text/html'        }))        ifr.src = url        ifr.onload = function(){          ifr.height = ifr.contentDocument.documentElement.offsetHeight        }        ifr.onresize = function(){          ifr.height = ifr.contentDocument.documentElement.offsetHeight        }        const shell = document.querySelector('#hexo-eb7d3')        shell.parentNode.removeChild(shell)      })();    </script><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">handle</span> = e =&gt; &#123;<span class="attr">s</span>:<span class="number">1</span>&#125;</span><br><span class="line">dom.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>,handle,<span class="literal">false</span>)</span><br><span class="line">dom.<span class="title function_">removeEventListener</span>(<span class="string">&#x27;click&#x27;</span>,handle,<span class="literal">false</span>)</span><br><span class="line">dom.<span class="title function_">dispatchEvent</span>(<span class="keyword">new</span> <span class="title class_">Event</span>(<span class="string">&#x27;click&#x27;</span>))</span><br></pre></td></tr></table></figure>    <iframe name="input" module="hexo-a6c2d" frameborder="0" width="100%"></iframe>    <script type="text/javascript" id="hexo-a6c2d">      (function(){        let ifr = document.querySelector('iframe[module=hexo-a6c2d]')        const url = URL.createObjectURL(new Blob([unescape("%3C%21DOCTYPE%20html%3E%3Chtml%20lang%3D%22en%22%20dir%3D%22ltr%22%3E%3Chead%3E%0A%20%20%20%20%3Cmeta%20charset%3D%22utf-8%22%3E%0A%20%20%20%20%3Ctitle%3E%u4E8B%u4EF6%u5904%u7406%3C/title%3E%0A%20%20%3C/head%3E%0A%20%20%3Cbody%3E%0A%20%20%20%20%0A%20%20%20%20%3Csection%20class%3D%22module%20input%22%3E%0A%20%20%20%20%20%20%3Cinput%20type%3D%22input%22%20name%3D%22input%22%20placeholder%3D%22%u7528%u6237%u540D%22%20autocomplete%3D%22off%22%3E%0A%20%20%20%20%3C/section%3E%0A%20%20%0A%3C/body%3E%3C/html%3E")], {          type: 'text/html'        }))        ifr.src = url        ifr.onload = function(){          ifr.height = ifr.contentDocument.documentElement.offsetHeight        }        ifr.onresize = function(){          ifr.height = ifr.contentDocument.documentElement.offsetHeight        }        const shell = document.querySelector('#hexo-a6c2d')        shell.parentNode.removeChild(shell)      })();    </script><p>在此，大家先熟悉这三个接口的使用方法，后续我们会提供一些代码示例。</p><h3 id="内置事件"><a href="#内置事件" class="headerlink" title="内置事件"></a>内置事件</h3><p>事件也称作 DOM 事件，它包括鼠标事件、键盘事件、框架/对象（Frame/Object）事件、表单事件、剪贴板事件、打印事件、拖动事件、多媒体（Media）事件、动画事件、过渡事件等。</p><p><img src="https://tse4-mm.cn.bing.net/th/id/OIP-C.1l4OcMdQR8o2vGTSoDt-QAHaFS?pid=ImgDet&rs=1"></p><blockquote><p>在 HTML 里可以结合 on+event 来绑定事件，浏览器提供了很多内置的事件</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;(event)=&gt;&#123;console.log(event)&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>    <iframe name="event" module="hexo-e4748" frameborder="0" width="100%"></iframe>    <script type="text/javascript" id="hexo-e4748">      (function(){        let ifr = document.querySelector('iframe[module=hexo-e4748]')        const url = URL.createObjectURL(new Blob([unescape("%3C%21DOCTYPE%20html%3E%3Chtml%20lang%3D%22en%22%20dir%3D%22ltr%22%3E%3Chead%3E%0A%20%20%20%20%3Cmeta%20charset%3D%22utf-8%22%3E%0A%20%20%20%20%3Ctitle%3E%u4E8B%u4EF6%u5904%u7406%3C/title%3E%0A%20%20%3C/head%3E%0A%20%20%3Cbody%3E%0A%20%20%20%20%3Csection%20class%3D%22module%20event%22%3E%0A%20%20%20%20%20%20%3Cbutton%20type%3D%22button%22%20name%3D%22button%22%3E%u70B9%u51FB%3C/button%3E%0A%20%20%20%20%20%20%3Cscript%20type%3D%22text/javascript%22%3E%0A%20%20%20%20%20%20%20%20const%20btn%20%3D%20document.querySelector%28%22button%5Bname%3Dbutton%5D%22%29%0A%20%20%20%20%20%20%20%20btn.addEventListener%28%27click%27%2C%20e%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20%20%20console.log%28e.timeStamp%29%0A%20%20%20%20%20%20%20%20%7D%2C%20false%29%0A%20%20%20%20%20%20%3C/script%3E%0A%20%20%20%20%3C/section%3E%0A%20%20%20%20%0A%20%20%0A%3C/body%3E%3C/html%3E")], {          type: 'text/html'        }))        ifr.src = url        ifr.onload = function(){          ifr.height = ifr.contentDocument.documentElement.offsetHeight        }        ifr.onresize = function(){          ifr.height = ifr.contentDocument.documentElement.offsetHeight        }        const shell = document.querySelector('#hexo-e4748')        shell.parentNode.removeChild(shell)      })();    </script><h4 id="鼠标事件"><a href="#鼠标事件" class="headerlink" title="鼠标事件"></a>鼠标事件</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">dom.<span class="title function_">addeventListener</span>(<span class="string">&#x27;click&#x27;</span>,<span class="function"><span class="params">e</span>=&gt;</span>&#123;&#125;)           <span class="comment">// 当用户点击某个对象时调用的事件句柄</span></span><br><span class="line">dom.<span class="title function_">addeventListener</span>(<span class="string">&#x27;dblclick&#x27;</span>,<span class="function"><span class="params">e</span>=&gt;</span>&#123;&#125;)        <span class="comment">// 当用户双击某个对象时调用的事件句柄</span></span><br><span class="line">dom.<span class="title function_">addeventListener</span>(<span class="string">&#x27;contextmenu&#x27;</span>,<span class="function"><span class="params">e</span>=&gt;</span>&#123;&#125;)     <span class="comment">// 在用户点击鼠标右键打开上下文菜单时触发</span></span><br><span class="line">dom.<span class="title function_">addeventListener</span>(<span class="string">&#x27;mousedown&#x27;</span>,<span class="function"><span class="params">e</span>=&gt;</span>&#123;&#125;)       <span class="comment">// 鼠标按钮被按下</span></span><br><span class="line">dom.<span class="title function_">addeventListener</span>(<span class="string">&#x27;mousemove&#x27;</span>,<span class="function"><span class="params">e</span>=&gt;</span>&#123;&#125;)       <span class="comment">// 鼠标被移动</span></span><br><span class="line">dom.<span class="title function_">addeventListener</span>(<span class="string">&#x27;mouseenter&#x27;</span>,<span class="function"><span class="params">e</span>=&gt;</span>&#123;&#125;)      <span class="comment">// 当鼠标指针移动到元素上时触发</span></span><br><span class="line">dom.<span class="title function_">addeventListener</span>(<span class="string">&#x27;mouseover&#x27;</span>,<span class="function"><span class="params">e</span>=&gt;</span>&#123;&#125;)       <span class="comment">// 鼠标移到某元素之上</span></span><br><span class="line">dom.<span class="title function_">addeventListener</span>(<span class="string">&#x27;mouseout&#x27;</span>,<span class="function"><span class="params">e</span>=&gt;</span>&#123;&#125;)        <span class="comment">// 鼠标从某元素移开</span></span><br><span class="line">dom.<span class="title function_">addeventListener</span>(<span class="string">&#x27;mouseup&#x27;</span>,<span class="function"><span class="params">e</span>=&gt;</span>&#123;&#125;)         <span class="comment">// 鼠标按键被松开</span></span><br><span class="line">dom.<span class="title function_">addeventListener</span>(<span class="string">&#x27;mouseleave&#x27;</span>,<span class="function"><span class="params">e</span>=&gt;</span>&#123;&#125;)      <span class="comment">// 当鼠标指针移出元素时触发</span></span><br></pre></td></tr></table></figure><h4 id="键盘事件"><a href="#键盘事件" class="headerlink" title="键盘事件"></a>键盘事件</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dom.<span class="title function_">addeventListener</span>(<span class="string">&#x27;keydown&#x27;</span>,<span class="function"><span class="params">e</span>=&gt;</span>&#123;&#125;)         <span class="comment">// 某个键盘按键被按下</span></span><br><span class="line">dom.<span class="title function_">addeventListener</span>(<span class="string">&#x27;keyup&#x27;</span>,<span class="function"><span class="params">e</span>=&gt;</span>&#123;&#125;)           <span class="comment">// 某个键盘按键被松开</span></span><br><span class="line">dom.<span class="title function_">addeventListener</span>(<span class="string">&#x27;keypress&#x27;</span>,<span class="function"><span class="params">e</span>=&gt;</span>&#123;&#125;)        <span class="comment">// 某个键盘按键被按下并松开</span></span><br></pre></td></tr></table></figure><h4 id="框架-对象事件"><a href="#框架-对象事件" class="headerlink" title="框架/对象事件"></a>框架/对象事件</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">dom.<span class="title function_">addeventListener</span>(<span class="string">&#x27;abort&#x27;</span>,<span class="function"><span class="params">e</span>=&gt;</span>&#123;&#125;)           <span class="comment">// 图像的加载被中断 &lt;object&gt;</span></span><br><span class="line">dom.<span class="title function_">addeventListener</span>(<span class="string">&#x27;beforeunload&#x27;</span>,<span class="function"><span class="params">e</span>=&gt;</span>&#123;&#125;)    <span class="comment">// 该事件在即将离开页面（刷新或关闭）时触发</span></span><br><span class="line">dom.<span class="title function_">addeventListener</span>(<span class="string">&#x27;error&#x27;</span>,<span class="function"><span class="params">e</span>=&gt;</span>&#123;&#125;)           <span class="comment">// 在加载文档或图像时发生错误 &lt;object&gt;, &lt;body&gt;和 &lt;frameset&gt;</span></span><br><span class="line">dom.<span class="title function_">addeventListener</span>(<span class="string">&#x27;hashchange&#x27;</span>,<span class="function"><span class="params">e</span>=&gt;</span>&#123;&#125;)      <span class="comment">// 该事件在当前 URL 的锚部分发生修改时触发</span></span><br><span class="line">dom.<span class="title function_">addeventListener</span>(<span class="string">&#x27;load&#x27;</span>,<span class="function"><span class="params">e</span>=&gt;</span>&#123;&#125;)            <span class="comment">// 一张页面或一幅图像完成加载</span></span><br><span class="line">dom.<span class="title function_">addeventListener</span>(<span class="string">&#x27;pageshow&#x27;</span>,<span class="function"><span class="params">e</span>=&gt;</span>&#123;&#125;)        <span class="comment">// 该事件在用户访问页面时触发</span></span><br><span class="line">dom.<span class="title function_">addeventListener</span>(<span class="string">&#x27;pagehide&#x27;</span>,<span class="function"><span class="params">e</span>=&gt;</span>&#123;&#125;)        <span class="comment">// 该事件在用户离开当前网页跳转到另外一个页面时触发</span></span><br><span class="line">dom.<span class="title function_">addeventListener</span>(<span class="string">&#x27;resize&#x27;</span>,<span class="function"><span class="params">e</span>=&gt;</span>&#123;&#125;)          <span class="comment">// 窗口或框架被重新调整大小</span></span><br><span class="line">dom.<span class="title function_">addeventListener</span>(<span class="string">&#x27;scroll&#x27;</span>,<span class="function"><span class="params">e</span>=&gt;</span>&#123;&#125;)          <span class="comment">// 当文档被滚动时发生的事件</span></span><br><span class="line">dom.<span class="title function_">addeventListener</span>(<span class="string">&#x27;unload&#x27;</span>,<span class="function"><span class="params">e</span>=&gt;</span>&#123;&#125;)          <span class="comment">// 用户退出页面。 ( &lt;body&gt; 和 &lt;frameset&gt;)</span></span><br></pre></td></tr></table></figure><h4 id="表单事件"><a href="#表单事件" class="headerlink" title="表单事件"></a>表单事件</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">dom.<span class="title function_">addeventListener</span>(<span class="string">&#x27;input&#x27;</span>,<span class="function"><span class="params">e</span>=&gt;</span>&#123;&#125;)           <span class="comment">// 元素获取用户输入时触发</span></span><br><span class="line">dom.<span class="title function_">addeventListener</span>(<span class="string">&#x27;select&#x27;</span>,<span class="function"><span class="params">e</span>=&gt;</span>&#123;&#125;)          <span class="comment">// 用户选取文本时触发 ( &lt;input&gt; 和 &lt;textarea&gt;)</span></span><br><span class="line">dom.<span class="title function_">addeventListener</span>(<span class="string">&#x27;change&#x27;</span>,<span class="function"><span class="params">e</span>=&gt;</span>&#123;&#125;)          <span class="comment">// 该事件在表单元素的内容改变时触发( &lt;input&gt;, &lt;keygen&gt;, &lt;select&gt;, 和 &lt;textarea&gt;)</span></span><br><span class="line">dom.<span class="title function_">addeventListener</span>(<span class="string">&#x27;focus&#x27;</span>,<span class="function"><span class="params">e</span>=&gt;</span>&#123;&#125;)           <span class="comment">// 元素获取焦点时触发</span></span><br><span class="line">dom.<span class="title function_">addeventListener</span>(<span class="string">&#x27;reset&#x27;</span>,<span class="function"><span class="params">e</span>=&gt;</span>&#123;&#125;)           <span class="comment">// 表单重置时触发</span></span><br><span class="line">dom.<span class="title function_">addeventListener</span>(<span class="string">&#x27;submit&#x27;</span>,<span class="function"><span class="params">e</span>=&gt;</span>&#123;&#125;)          <span class="comment">// 表单提交时触发</span></span><br><span class="line">dom.<span class="title function_">addeventListener</span>(<span class="string">&#x27;blur&#x27;</span>,<span class="function"><span class="params">e</span>=&gt;</span>&#123;&#125;)            <span class="comment">// 元素失去焦点时触发</span></span><br></pre></td></tr></table></figure><h4 id="拖拽事件"><a href="#拖拽事件" class="headerlink" title="拖拽事件"></a>拖拽事件</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">dom.<span class="title function_">addeventListener</span>(<span class="string">&#x27;dragstart&#x27;</span>, <span class="function"><span class="params">e</span>=&gt;</span>&#123;&#125;)      <span class="comment">// 该事件在用户开始拖动元素时触发</span></span><br><span class="line">dom.<span class="title function_">addeventListener</span>(<span class="string">&#x27;drag&#x27;</span>,<span class="function"><span class="params">e</span>=&gt;</span>&#123;&#125;)            <span class="comment">// 该事件在元素正在拖动时触发</span></span><br><span class="line">dom.<span class="title function_">addeventListener</span>(<span class="string">&#x27;dragend&#x27;</span>, <span class="function"><span class="params">e</span>=&gt;</span>&#123;&#125;)        <span class="comment">// 该事件在用户完成元素的拖动时触发</span></span><br><span class="line">dom.<span class="title function_">addeventListener</span>(<span class="string">&#x27;dragover&#x27;</span>,<span class="function"><span class="params">e</span>=&gt;</span>&#123;&#125;)        <span class="comment">// 该事件在拖动元素在放置目标上时触发</span></span><br><span class="line">dom.<span class="title function_">addeventListener</span>(<span class="string">&#x27;dragenter&#x27;</span>,<span class="function"><span class="params">e</span>=&gt;</span>&#123;&#125;)       <span class="comment">// 该事件在拖动的元素进入放置目标时触发</span></span><br><span class="line">dom.<span class="title function_">addeventListener</span>(<span class="string">&#x27;dragleave&#x27;</span>,<span class="function"><span class="params">e</span>=&gt;</span>&#123;&#125;)       <span class="comment">// 该事件在拖动元素离开放置目标时触发</span></span><br><span class="line">dom.<span class="title function_">addeventListener</span>(<span class="string">&#x27;drop&#x27;</span>,<span class="function"><span class="params">e</span>=&gt;</span>&#123;&#125;)            <span class="comment">// 该事件在拖动元素放置在目标区域时触发</span></span><br></pre></td></tr></table></figure><h4 id="剪贴板事件"><a href="#剪贴板事件" class="headerlink" title="剪贴板事件"></a>剪贴板事件</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">dom.<span class="title function_">addeventListener</span>(<span class="string">&#x27;copy&#x27;</span>,<span class="function"><span class="params">e</span>=&gt;</span>&#123;&#125;)            <span class="comment">// 该事件在用户拷贝元素内容时触发</span></span><br><span class="line">dom.<span class="title function_">addeventListener</span>(<span class="string">&#x27;cut&#x27;</span>,<span class="function"><span class="params">e</span>=&gt;</span>&#123;&#125;)             <span class="comment">// 该事件在用户剪切元素内容时触发</span></span><br><span class="line">dom.<span class="title function_">addeventListener</span>(<span class="string">&#x27;paste&#x27;</span>,<span class="function"><span class="params">e</span>=&gt;</span>&#123;&#125;)           <span class="comment">// 该事件在用户粘贴元素内容时触发</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 实例展示</span></span><br><span class="line"><span class="keyword">const</span> content = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.content&#x27;</span>)</span><br><span class="line">content.<span class="title function_">addeventListener</span>(<span class="string">&#x27;copy&#x27;</span>, <span class="function"><span class="params">event</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> selection = <span class="variable language_">document</span>.<span class="title function_">getSelection</span>();</span><br><span class="line">  event.<span class="property">clipboardData</span>.<span class="title function_">setData</span>(<span class="string">&#x27;text/plain&#x27;</span>, selection.<span class="title function_">toString</span>().<span class="title function_">toUpperCase</span>());</span><br><span class="line">  event.<span class="title function_">preventDefault</span>();</span><br><span class="line">  <span class="comment">// Clipboardevent &#123;isTrusted: true, clipboardData: DataTransfer, type: &#x27;copy&#x27;, target: p, currentTarget: div.content, …&#125;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="打印事件"><a href="#打印事件" class="headerlink" title="打印事件"></a>打印事件</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dom.<span class="title function_">addeventListener</span>(<span class="string">&#x27;afterprint&#x27;</span>,<span class="function"><span class="params">e</span>=&gt;</span>&#123;&#125;)      <span class="comment">// 该事件在页面已经开始打印，或者打印窗口已经关闭时触发</span></span><br><span class="line">dom.<span class="title function_">addeventListener</span>(<span class="string">&#x27;beforeprint&#x27;</span>,<span class="function"><span class="params">e</span>=&gt;</span>&#123;&#125;)     <span class="comment">// 该事件在页面即将开始打印时触发</span></span><br></pre></td></tr></table></figure><h4 id="多媒体事件"><a href="#多媒体事件" class="headerlink" title="多媒体事件"></a>多媒体事件</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">dom.<span class="title function_">addeventListener</span>(<span class="string">&#x27;abort&#x27;</span>,<span class="function"><span class="params">e</span>=&gt;</span>&#123;&#125;)           <span class="comment">// 事件在视频/音频（audio/video）终止加载时触发</span></span><br><span class="line">dom.<span class="title function_">addeventListener</span>(<span class="string">&#x27;anplay&#x27;</span>,<span class="function"><span class="params">e</span>=&gt;</span>&#123;&#125;)          <span class="comment">// 事件在用户可以开始播放视频/音频（audio/video）时触发</span></span><br><span class="line">dom.<span class="title function_">addeventListener</span>(<span class="string">&#x27;canplaythrough&#x27;</span>,<span class="function"><span class="params">e</span>=&gt;</span>&#123;&#125;)  <span class="comment">// 事件在视频/音频（audio/video）可以正常播放且无需停顿和缓冲时触发</span></span><br><span class="line">dom.<span class="title function_">addeventListener</span>(<span class="string">&#x27;durationchange&#x27;</span>,<span class="function"><span class="params">e</span>=&gt;</span>&#123;&#125;)  <span class="comment">// 事件在视频/音频（audio/video）的时长发生变化时触发</span></span><br><span class="line">dom.<span class="title function_">addeventListener</span>(<span class="string">&#x27;ended&#x27;</span>,<span class="function"><span class="params">e</span>=&gt;</span>&#123;&#125;)           <span class="comment">// 事件在视频/音频（audio/video）播放结束时触发</span></span><br><span class="line">dom.<span class="title function_">addeventListener</span>(<span class="string">&#x27;error&#x27;</span>,<span class="function"><span class="params">e</span>=&gt;</span>&#123;&#125;)           <span class="comment">// 事件在视频/音频（audio/video）数据加载期间发生错误时触发</span></span><br><span class="line">dom.<span class="title function_">addeventListener</span>(<span class="string">&#x27;loadeddata&#x27;</span>,<span class="function"><span class="params">e</span>=&gt;</span>&#123;&#125;)      <span class="comment">// 事件在浏览器加载视频/音频（audio/video）当前帧时触发触发</span></span><br><span class="line">dom.<span class="title function_">addeventListener</span>(<span class="string">&#x27;loadedmetadata&#x27;</span>,<span class="function"><span class="params">e</span>=&gt;</span>&#123;&#125;)  <span class="comment">// 事件在浏览器加载视频/音频（audio/video）当前帧时触发触发</span></span><br><span class="line">dom.<span class="title function_">addeventListener</span>(<span class="string">&#x27;pause&#x27;</span>,<span class="function"><span class="params">e</span>=&gt;</span>&#123;&#125;)           <span class="comment">// 事件在视频/音频（audio/video）暂停时触发</span></span><br><span class="line">dom.<span class="title function_">addeventListener</span>(<span class="string">&#x27;play&#x27;</span>,<span class="function"><span class="params">e</span>=&gt;</span>&#123;&#125;)            <span class="comment">// 事件在视频/音频（audio/video）开始播放时触发</span></span><br><span class="line">dom.<span class="title function_">addeventListener</span>(<span class="string">&#x27;timeupdate&#x27;</span>,<span class="function"><span class="params">e</span>=&gt;</span>&#123;&#125;)      <span class="comment">// 事件在当前的播放位置发送改变时触发</span></span><br><span class="line">dom.<span class="title function_">addeventListener</span>(<span class="string">&#x27;volumechange&#x27;</span>,<span class="function"><span class="params">e</span>=&gt;</span>&#123;&#125;)    <span class="comment">// 事件在音量发生改变时触发</span></span><br><span class="line">dom.<span class="title function_">addeventListener</span>(<span class="string">&#x27;seeked&#x27;</span>,<span class="function"><span class="params">e</span>=&gt;</span>&#123;&#125;)          <span class="comment">// 事件在用户重新定位视频/音频（audio/video）的播放位置后触发</span></span><br></pre></td></tr></table></figure><h4 id="动画事件"><a href="#动画事件" class="headerlink" title="动画事件"></a>动画事件</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dom.<span class="title function_">addeventListener</span>(<span class="string">&#x27;animationend&#x27;</span>,<span class="function"><span class="params">e</span>=&gt;</span>&#123;&#125;)          <span class="comment">// 该事件在 CSS 动画结束播放时触发</span></span><br><span class="line">dom.<span class="title function_">addeventListener</span>(<span class="string">&#x27;animationiteration&#x27;</span>,<span class="function"><span class="params">e</span>=&gt;</span>&#123;&#125;)    <span class="comment">// 该事件在 CSS 动画重复播放时触发</span></span><br><span class="line">dom.<span class="title function_">addeventListener</span>(<span class="string">&#x27;animationstart&#x27;</span>,<span class="function"><span class="params">e</span>=&gt;</span>&#123;&#125;)        <span class="comment">// 该事件在 CSS 动画开始播放时触发</span></span><br></pre></td></tr></table></figure><h4 id="过渡事件"><a href="#过渡事件" class="headerlink" title="过渡事件"></a>过渡事件</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dom.<span class="title function_">addeventListener</span>(<span class="string">&#x27;transitionend&#x27;</span>,<span class="function"><span class="params">e</span>=&gt;</span>&#123;&#125;)     <span class="comment">// 该事件在 CSS 完成过渡后触发</span></span><br></pre></td></tr></table></figure><h4 id="触摸事件"><a href="#触摸事件" class="headerlink" title="触摸事件"></a>触摸事件</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dom.<span class="title function_">addeventListener</span>(<span class="string">&quot;touchstart&quot;</span>, <span class="function"><span class="params">e</span> =&gt;</span>&#123;&#125;, <span class="literal">false</span>)</span><br><span class="line">dom.<span class="title function_">addeventListener</span>(<span class="string">&quot;touchend&quot;</span>, <span class="function"><span class="params">e</span> =&gt;</span>&#123;&#125;, <span class="literal">false</span>)</span><br><span class="line">dom.<span class="title function_">addeventListener</span>(<span class="string">&quot;touchmove&quot;</span>, <span class="function"><span class="params">e</span> =&gt;</span>&#123;&#125;, <span class="literal">false</span>)</span><br></pre></td></tr></table></figure><h3 id="自定义事件"><a href="#自定义事件" class="headerlink" title="自定义事件"></a>自定义事件</h3><p><strong>1. new event</strong></p><p>此 event 是 event 但非 event，event 是根也是魂。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ev = <span class="keyword">new</span> <span class="title function_">event</span>(<span class="string">&#x27;click&#x27;</span>)</span><br><span class="line">dom.<span class="title function_">dispatchevent</span>(ev)</span><br></pre></td></tr></table></figure><p><strong>2. new Customevent</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ev = <span class="keyword">new</span> <span class="title class_">Customevent</span>(<span class="string">&#x27;click&#x27;</span>,&#123;<span class="attr">detail</span>:&#123;&#125;&#125;)</span><br><span class="line">dom.<span class="title function_">dispatchevent</span>()</span><br></pre></td></tr></table></figure><p><strong>3. dispatchevent</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dom.<span class="title function_">dispatchevent</span>(<span class="keyword">new</span> <span class="title class_">Customevent</span>(<span class="string">&#x27;click&#x27;</span>))</span><br><span class="line">dom.<span class="title function_">dispatchevent</span>(<span class="keyword">new</span> <span class="title function_">event</span>(<span class="string">&#x27;click&#x27;</span>))</span><br></pre></td></tr></table></figure><p><strong>4. addeventListener</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="title function_">addeventListener</span>(<span class="string">&#x27;click&#x27;</span>,<span class="function"><span class="params">e</span>=&gt;</span>&#123;&#125;,<span class="literal">false</span>)</span><br><span class="line">dom.<span class="title function_">addeventListener</span>(<span class="string">&#x27;input&#x27;</span>,<span class="function"><span class="params">e</span>=&gt;</span>&#123;&#125;,<span class="literal">false</span>)</span><br></pre></td></tr></table></figure><p><strong>5. removeeventListener</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dom.<span class="title function_">removeeventListener</span>(<span class="string">&#x27;mouseleave&#x27;</span>,<span class="function"><span class="params">e</span>=&gt;</span>&#123;&#125;)</span><br></pre></td></tr></table></figure><h3 id="事件模型"><a href="#事件模型" class="headerlink" title="事件模型"></a>事件模型</h3><p>三个阶段：事件捕获阶段、目标阶段、事件冒泡阶段。</p><p><img src="https://www.programminghunter.com/images/53/9d/9dfa27801cc26d6a25d8ab9d86fa77d5.png"><br><a href="https://pic2.zhimg.com/v2-9fd169cac0137e94d76ff9d7da7166bc_1440w.jpg?source=172ae18b"></a></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">dir</span>=<span class="string">&quot;ltr&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span>123<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="title function_">addeventListener</span>(<span class="string">&#x27;click&#x27;</span>,<span class="function"><span class="params">e</span>=&gt;</span>&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;window-captrue&#x27;</span>)&#125;,<span class="literal">true</span>)</span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addeventListener</span>(<span class="string">&#x27;click&#x27;</span>,<span class="function"><span class="params">e</span>=&gt;</span>&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;window-bubbles&#x27;</span>)&#125;,<span class="literal">false</span>)</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">addeventListener</span>(<span class="string">&#x27;click&#x27;</span>,<span class="function"><span class="params">e</span>=&gt;</span>&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;document-captrue&#x27;</span>)&#125;,<span class="literal">true</span>)</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">addeventListener</span>(<span class="string">&#x27;click&#x27;</span>,<span class="function"><span class="params">e</span>=&gt;</span>&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;document-bubbles&#x27;</span>)&#125;,<span class="literal">false</span>)</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="title function_">addeventListener</span>(<span class="string">&#x27;click&#x27;</span>,<span class="function"><span class="params">e</span>=&gt;</span>&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;html-captrue&#x27;</span>)&#125;,<span class="literal">true</span>)</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="title function_">addeventListener</span>(<span class="string">&#x27;click&#x27;</span>,<span class="function"><span class="params">e</span>=&gt;</span>&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;html-bubbles&#x27;</span>)&#125;,<span class="literal">false</span>)</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">addeventListener</span>(<span class="string">&#x27;click&#x27;</span>,<span class="function"><span class="params">e</span>=&gt;</span>&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;body-captrue&#x27;</span>)&#125;,<span class="literal">true</span>)</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">addeventListener</span>(<span class="string">&#x27;click&#x27;</span>,<span class="function"><span class="params">e</span>=&gt;</span>&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;body-bubbles&#x27;</span>)&#125;,<span class="literal">false</span>)</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>).<span class="title function_">addeventListener</span>(<span class="string">&#x27;click&#x27;</span>,<span class="function"><span class="params">e</span>=&gt;</span>&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;div-captrue&#x27;</span>)&#125;,<span class="literal">true</span>)</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>).<span class="title function_">addeventListener</span>(<span class="string">&#x27;click&#x27;</span>,<span class="function"><span class="params">e</span>=&gt;</span>&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;div-bubbles&#x27;</span>)&#125;,<span class="literal">false</span>)</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;p&#x27;</span>).<span class="title function_">addeventListener</span>(<span class="string">&#x27;click&#x27;</span>,<span class="function"><span class="params">e</span>=&gt;</span>&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;p-captrue&#x27;</span>)&#125;,<span class="literal">true</span>)</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;p&#x27;</span>).<span class="title function_">addeventListener</span>(<span class="string">&#x27;click&#x27;</span>,<span class="function"><span class="params">e</span>=&gt;</span>&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;p-bubbles&#x27;</span>)&#125;,<span class="literal">false</span>)</span><br><span class="line"><span class="comment">// html-captrue</span></span><br><span class="line"><span class="comment">// body-captrue</span></span><br><span class="line"><span class="comment">// div-captrue</span></span><br><span class="line"><span class="comment">// p-captrue</span></span><br><span class="line"><span class="comment">// p-bubbles</span></span><br><span class="line"><span class="comment">// div-bubbles</span></span><br><span class="line"><span class="comment">// body-bubbles</span></span><br><span class="line"><span class="comment">// html-bubbles</span></span><br></pre></td></tr></table></figure><h3 id="事件对象"><a href="#事件对象" class="headerlink" title="事件对象"></a>事件对象</h3><p>事件发生以后，会产生一个事件对象，作为参数传给监听函数。浏览器原生提供一个event对象，所有的事件都是这个对象的实例，或者说继承了event.prototype对象。event对象本身就是一个构造函数，可以用来生成新的实例。event构造函数接受两个参数。第一个参数type是字符串，表示事件的名称；第二个参数options是一个对象，表示事件对象的配置。该对象主要有下面两个属性。</p><p>bubbles：布尔值，可选，默认为false，表示事件对象是否冒泡。<br>cancelable：布尔值，可选，默认为false，表示事件是否可以被取消，即能否用event.preventDefault()取消这个事件。一旦事件被取消，就好像从来没有发生过，不会触发浏览器对该事件的默认行为。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ev = <span class="keyword">new</span> <span class="title function_">event</span>(<span class="string">&#x27;click&#x27;</span>,&#123;</span><br><span class="line">  <span class="string">&#x27;bubbles&#x27;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="string">&#x27;cancelable&#x27;</span>: <span class="literal">false</span></span><br><span class="line">&#125;)</span><br><span class="line">dom.<span class="title function_">dispatchevent</span>(ev)</span><br></pre></td></tr></table></figure><h4 id="实例属性"><a href="#实例属性" class="headerlink" title="实例属性"></a>实例属性</h4><table><thead><tr><th align="center">属性</th><th>值</th><th>描述</th></tr></thead><tbody><tr><td align="center">bubbles</td><td>true/false</td><td>表示当前事件是否会冒泡。该属性为只读属性，一般用来了解 event 实例是否可以冒泡</td></tr><tr><td align="center">eventPhase</td><td>0/1/2/3</td><td>eventPhase属性返回一个整数常量，表示事件目前所处的阶段:事件目前没有发生、事件目前处于捕获阶段、事件到达目标节点、事件处于冒泡阶段</td></tr><tr><td align="center">cancelable</td><td>true/false</td><td>表示事件是否可以取消</td></tr><tr><td align="center">cancelBubble</td><td>true/false</td><td>相当于执行 event.stopPropagation()</td></tr><tr><td align="center">currentTarget</td><td>DOM</td><td>事件当前正在通过的节</td></tr><tr><td align="center">target</td><td>DOM</td><td>事件的原始触发节点（event.target）</td></tr><tr><td align="center">type</td><td>String</td><td>表示事件类型</td></tr><tr><td align="center">timeStamp</td><td>毫秒时间戳</td><td>表示事件发生的时间,它是相对于网页加载成功开始计算的</td></tr><tr><td align="center">isTrusted</td><td>true/false</td><td>表示该事件是否由真实的用户行为产生</td></tr></tbody></table><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ev = <span class="keyword">new</span> <span class="title class_">Event</span>(<span class="string">&#x27;click&#x27;</span>);</span><br><span class="line">ev.<span class="property">type</span> <span class="comment">// &quot;click&quot;</span></span><br><span class="line">ev.<span class="property">eventPhase</span> <span class="comment">// 0</span></span><br></pre></td></tr></table></figure><h4 id="实例方法"><a href="#实例方法" class="headerlink" title="实例方法"></a>实例方法</h4><table><thead><tr><th>方法/属性</th><th>描述</th></tr></thead><tbody><tr><td>preventDefault()</td><td>方法取消浏览器对当前事件的默认行为。比如点击链接后，浏览器默认会跳转到另一个页面，使用这个方法以后，就不会跳转了</td></tr><tr><td>stopPropagation()</td><td>阻止事件在 DOM 中继续传播，防止再触发定义在别的节点上的监听函数，但是不包括在当前节点上其他的事件监听函数</td></tr><tr><td>stopImmediatePropagation()</td><td>阻止同一个事件的其他监听函数被调用，不管监听函数定义在当前节点还是其他节点</td></tr><tr><td>composedPath()</td><td>返回一个数组，成员是事件的最底层节点和依次冒泡经过的所有上层节点</td></tr><tr><td>eventPhase</td><td>属性返回一个整数常量，表示事件目前所处的阶段。该属性只读，</td></tr><tr><td>bubbless</td><td>属性返回一个布尔值，表示当前事件是否会冒泡</td></tr><tr><td>cancelable</td><td>属性返回一个布尔值，表示事件是否可以取消</td></tr></tbody></table><p><a href="https://wangdoc.com/javascript/events/event.html"></a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>运算符</title>
      <link href="/40bc98d0-6073-11ec-b0fa-7939311ba144/"/>
      <url>/40bc98d0-6073-11ec-b0fa-7939311ba144/</url>
      
        <content type="html"><![CDATA[<h2 id="operator"><a href="#operator" class="headerlink" title="operator"></a>operator</h2><ol><li> operator ++</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = <span class="number">0</span></span><br><span class="line"><span class="keyword">const</span> b = a++</span><br><span class="line"><span class="keyword">const</span> c = ++a</span><br></pre></td></tr></table></figure><ol start="2"><li> operator ,</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = <span class="number">1</span></span><br><span class="line"><span class="keyword">const</span> b = (a++, <span class="number">4</span>)</span><br></pre></td></tr></table></figure><ol start="3"><li> operator \&amp;\&amp;</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = <span class="number">1</span></span><br><span class="line">a === <span class="number">1</span> &amp;&amp; <span class="title function_">do</span>() <span class="comment">// 等同于 if(a === 1)&#123; do() &#125;</span></span><br></pre></td></tr></table></figure><ol start="4"><li> operator ||</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = <span class="number">1</span></span><br><span class="line">a === <span class="number">1</span> || <span class="title function_">do</span>() <span class="comment">// 等同于 if(a !== 1)&#123; do() &#125;</span></span><br></pre></td></tr></table></figure><ol start="5"><li> operator ~~</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> num = ~~ <span class="number">1.23</span> <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><ol start="6"><li> operator |</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> num = <span class="number">1.23</span> | <span class="number">0</span> <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><ol start="7"><li> operator &gt;&gt;</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> num = <span class="number">1.23</span> &gt;&gt; <span class="number">0</span> <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><ol start="8"><li> void</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="keyword">function</span>(<span class="params"></span>) &#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;iife&#x27;</span>)&#125;() <span class="comment">// &#x27;iife&#x27;</span></span><br><span class="line"><span class="keyword">function</span>(<span class="params"></span>) &#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;iife&#x27;</span>)&#125;() <span class="comment">// Uncaught SyntaxError: Function statements require a function name</span></span><br><span class="line">(<span class="keyword">function</span>(<span class="params"></span>) &#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;iife&#x27;</span>)&#125;)() <span class="comment">// &#x27;iife&#x27;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>数据处理</title>
      <link href="/6de0a5a0-6072-11ec-bf63-672e56567b3e/"/>
      <url>/6de0a5a0-6072-11ec-bf63-672e56567b3e/</url>
      
        <content type="html"><![CDATA[<h3 id="数据处理"><a href="#数据处理" class="headerlink" title="数据处理"></a>数据处理</h3><ol><li> Number.prototype.toLocaleString</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> number = <span class="number">123456.789</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 要求货币格式</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(number.<span class="title function_">toLocaleString</span>(<span class="string">&#x27;de-DE&#x27;</span>, &#123; <span class="attr">style</span>: <span class="string">&#x27;currency&#x27;</span>, <span class="attr">currency</span>: <span class="string">&#x27;EUR&#x27;</span> &#125;));</span><br><span class="line"><span class="comment">// → 123.456,79 €</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 日元不使用小数位</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(number.<span class="title function_">toLocaleString</span>(<span class="string">&#x27;ja-JP&#x27;</span>, &#123; <span class="attr">style</span>: <span class="string">&#x27;currency&#x27;</span>, <span class="attr">currency</span>: <span class="string">&#x27;JPY&#x27;</span> &#125;))</span><br><span class="line"><span class="comment">// → ￥123,457</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 限制三位有效数字</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(number.<span class="title function_">toLocaleString</span>(<span class="string">&#x27;en-IN&#x27;</span>, &#123; <span class="attr">maximumSignificantDigits</span>: <span class="number">3</span> &#125;));</span><br><span class="line"><span class="comment">// → 1,23,000</span></span><br><span class="line"></span><br><span class="line"><span class="number">254.</span>.<span class="title function_">toString</span>(<span class="number">16</span>) <span class="comment">// &#x27;fe&#x27;</span></span><br><span class="line"><span class="number">254.</span>.<span class="title function_">toLocaleString</span>(<span class="number">16</span>) <span class="comment">// &#x27;254&#x27;</span></span><br></pre></td></tr></table></figure><ol start="2"><li> Date.prototype.toLocaleString</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">date.<span class="title function_">toLocaleString</span>(<span class="string">&#x27;zh&#x27;</span>);    <span class="comment">// 2018-4-4 15:08:38</span></span><br><span class="line">date.<span class="title function_">toLocaleString</span>(<span class="string">&#x27;en-US&#x27;</span>);    <span class="comment">// 4/4/2018, 3:08:38 PM</span></span><br></pre></td></tr></table></figure><ol start="3"><li> Array.prototype.toLocaleString</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> prices = [<span class="string">&#x27;￥7&#x27;</span>, <span class="number">500</span>, <span class="number">8123</span>, <span class="number">12</span>];</span><br><span class="line">prices.<span class="title function_">toLocaleString</span>(<span class="string">&#x27;ja-JP&#x27;</span>, &#123; <span class="attr">style</span>: <span class="string">&#x27;currency&#x27;</span>, <span class="attr">currency</span>: <span class="string">&#x27;JPY&#x27;</span> &#125;);</span><br><span class="line"><span class="comment">// &quot;￥7,￥500,￥8,123,￥12&quot;</span></span><br></pre></td></tr></table></figure><ol start="4"><li> String.prototype.replace</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">replacer</span>(<span class="params">match, p1, p2, p3, offset, string</span>) &#123;</span><br><span class="line">  <span class="comment">// p1 is nondigits, p2 digits, and p3 non-alphanumerics</span></span><br><span class="line">  <span class="keyword">return</span> [p1, p2, p3].<span class="title function_">join</span>(<span class="string">&#x27; - &#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> newString = <span class="string">&#x27;abc12345#$*%&#x27;</span>.<span class="title function_">replace</span>(<span class="regexp">/([^\d]*)(\d*)([^\w]*)/</span>, replacer);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newString);  <span class="comment">// abc - 12345 - #$*%</span></span><br></pre></td></tr></table></figure><ol start="5"><li> String.prototype.padStart/padEnd</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> str1 = <span class="string">&#x27;5&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str1.<span class="title function_">padStart</span>(<span class="number">2</span>, <span class="string">&#x27;0&#x27;</span>));</span><br><span class="line"><span class="comment">// expected output: &quot;05&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fullNumber = <span class="string">&#x27;2034399002125581&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> last4Digits = fullNumber.<span class="title function_">slice</span>(-<span class="number">4</span>);</span><br><span class="line"><span class="keyword">const</span> maskedNumber = last4Digits.<span class="title function_">padStart</span>(fullNumber.<span class="property">length</span>, <span class="string">&#x27;*&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(maskedNumber);</span><br><span class="line"><span class="comment">// expected output: &quot;************5581&quot;</span></span><br></pre></td></tr></table></figure><ol start="6"><li> Array.prototype.reduce</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> array1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">reducer</span> = (<span class="params">previousValue, currentValue</span>) =&gt; previousValue + currentValue;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1 + 2 + 3 + 4</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(array1.<span class="title function_">reduce</span>(reducer));</span><br><span class="line"><span class="comment">// expected output: 10</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 5 + 1 + 2 + 3 + 4</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(array1.<span class="title function_">reduce</span>(reducer, <span class="number">5</span>));</span><br></pre></td></tr></table></figure><ol start="7"><li> Math.random</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(list.<span class="title function_">sort</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">random</span>() - <span class="number">0.5</span></span><br><span class="line">&#125;));</span><br><span class="line"><span class="comment">// [4, 8, 2, 9, 1, 3, 6, 5, 7]</span></span><br><span class="line"><span class="comment">// random 分布图</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Random</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">count = <span class="number">100</span>, width = <span class="number">400</span>, height = <span class="number">300</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">count</span> = count</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">width</span> = width</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">height</span> = height</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">root</span> = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;canvas&#x27;</span>)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">root</span>.<span class="property">width</span> = <span class="string">`<span class="subst">$&#123;width&#125;</span>`</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">root</span>.<span class="property">height</span> = <span class="string">`<span class="subst">$&#123;height&#125;</span>`</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">canvas</span> = <span class="variable language_">this</span>.<span class="property">root</span>.<span class="title function_">getContext</span>(<span class="string">&#x27;2d&#x27;</span>)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">xScale</span> = width / count</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">yScale</span> = height / count</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">decision</span> = count.<span class="title function_">toString</span>().<span class="property">length</span> - <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">random</span>(<span class="params">n</span>) &#123;</span><br><span class="line">    <span class="keyword">switch</span> (n) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">random</span>()</span><br><span class="line">      <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="title class_">Math</span>.<span class="title function_">random</span>()</span><br><span class="line">      <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="title class_">Math</span>.<span class="title function_">random</span>()</span><br><span class="line">      <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="title class_">Math</span>.<span class="title function_">random</span>()</span><br><span class="line">      <span class="attr">default</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">random</span>()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">create</span>(<span class="params">n</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> logs = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, count = <span class="variable language_">this</span>.<span class="property">count</span>, k, v; i &lt; count; i++) &#123;</span><br><span class="line">      <span class="comment">// v = + new Function(`return $&#123;Array(4).fill(&#x27;Math.random()&#x27;).join(&#x27;*&#x27;)&#125;`)()  效率低 low effciency</span></span><br><span class="line">      v = <span class="variable language_">this</span>.<span class="title function_">random</span>(n)</span><br><span class="line">      k = v.<span class="title function_">toFixed</span>(<span class="variable language_">this</span>.<span class="property">decision</span>)</span><br><span class="line">      <span class="keyword">if</span> (!logs[k]) &#123;</span><br><span class="line">        logs[k] = <span class="number">1</span></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        logs[k]++</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> logs</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">draw</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> data = <span class="variable language_">this</span>.<span class="title function_">create</span>(<span class="number">4</span>)</span><br><span class="line">    <span class="keyword">const</span> canvas = <span class="variable language_">this</span>.<span class="property">canvas</span></span><br><span class="line">    <span class="keyword">const</span> width = <span class="variable language_">this</span>.<span class="property">width</span></span><br><span class="line">    <span class="keyword">const</span> height = <span class="variable language_">this</span>.<span class="property">height</span></span><br><span class="line">    <span class="keyword">const</span> count = <span class="variable language_">this</span>.<span class="property">count</span></span><br><span class="line">    <span class="keyword">const</span> decision = <span class="title class_">Math</span>.<span class="title function_">max</span>(<span class="title class_">Math</span>.<span class="title function_">pow</span>(<span class="number">10</span>, <span class="variable language_">this</span>.<span class="property">decision</span> - <span class="number">1</span>), <span class="number">10</span>)</span><br><span class="line">    canvas.<span class="property">fillStyle</span> = <span class="string">&#x27;blue&#x27;</span></span><br><span class="line">    <span class="keyword">let</span> h</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> [k, v] <span class="keyword">of</span> <span class="title class_">Object</span>.<span class="title function_">entries</span>(data)) &#123;</span><br><span class="line">      h = v / count * height * decision</span><br><span class="line">      canvas.<span class="title function_">fillRect</span>(width * k, height - h, <span class="number">1</span>, h);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">mount</span>(<span class="params">selector</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> root = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(selector)</span><br><span class="line">    <span class="keyword">if</span> (root) &#123;</span><br><span class="line">      root.<span class="title function_">appendChild</span>(<span class="variable language_">this</span>.<span class="property">root</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> r = <span class="keyword">new</span> <span class="title class_">Random</span>(<span class="number">9000</span>)</span><br><span class="line">r.<span class="title function_">mount</span>(<span class="string">&#x27;.data&#x27;</span>)</span><br><span class="line">r.<span class="title function_">draw</span>()</span><br></pre></td></tr></table></figure><ol start="8"><li> new Set</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> my_array = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">5</span>]</span><br><span class="line"><span class="keyword">const</span> unique_array = [...<span class="keyword">new</span> <span class="title class_">Set</span>(my_array)];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(unique_array); <span class="comment">// [1, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure><ol start="9"><li> String.prototype.trim</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><ol start="10"><li>Array.prototype.splice</li></ol><p>不要用 delete arr[2]</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span>  arr = [<span class="number">1</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">8</span>];</span><br><span class="line"><span class="keyword">delete</span> arr[<span class="number">2</span>] <span class="comment">// arr = [1,4,empty,8]</span></span><br><span class="line">arr.<span class="title function_">splice</span>(<span class="number">2</span>,<span class="number">1</span>) <span class="comment">// arr = [1,4,8]</span></span><br></pre></td></tr></table></figure><ol start="11"><li>JSON.stringify/parse</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;name :<span class="string">&#x27;Saad&#x27;</span>, age : <span class="number">26</span>, department : &#123;<span class="variable constant_">ID</span> : <span class="number">15</span>, name : <span class="string">&quot;R&amp;D&quot;</span>&#125; &#125;;</span><br><span class="line"><span class="keyword">var</span> stringFromPerson = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(person);</span><br><span class="line"><span class="comment">/* stringFromPerson 结果为 &quot;&#123;&quot;name&quot;:&quot;Saad&quot;,&quot;age&quot;:26,&quot;department&quot;:&#123;&quot;ID&quot;:15,&quot;name&quot;:&quot;R&amp;D&quot;&#125;&#125;&quot;   */</span></span><br><span class="line"><span class="keyword">var</span> personFromString = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(stringFromPerson);</span><br><span class="line"><span class="comment">/* personFromString 的值与 person 对象相同  */</span></span><br></pre></td></tr></table></figure><ol start="12"><li>Object.defineProperty</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> object1 = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(object1, <span class="string">&#x27;property1&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">value</span>: <span class="number">42</span>,</span><br><span class="line">  <span class="attr">writable</span>: <span class="literal">false</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">object1.<span class="property">property1</span> = <span class="number">77</span>;</span><br><span class="line"><span class="comment">// throws an error in strict mode</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(object1.<span class="property">property1</span>);</span><br><span class="line"><span class="comment">// expected output: 42</span></span><br></pre></td></tr></table></figure><ol start="13"><li>delete</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> trees = [<span class="string">&quot;redwood&quot;</span>,<span class="string">&quot;bay&quot;</span>,<span class="string">&quot;cedar&quot;</span>,<span class="string">&quot;oak&quot;</span>,<span class="string">&quot;maple&quot;</span>];</span><br><span class="line"><span class="keyword">delete</span> trees[<span class="number">3</span>];</span><br><span class="line"><span class="keyword">if</span> (<span class="number">3</span> <span class="keyword">in</span> trees) &#123;</span><br><span class="line">   <span class="comment">// 这里不会执行</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="14"><li>Array.prototype.length</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> trees = [<span class="string">&quot;redwood&quot;</span>,<span class="string">&quot;bay&quot;</span>,<span class="string">&quot;cedar&quot;</span>,<span class="string">&quot;oak&quot;</span>,<span class="string">&quot;maple&quot;</span>];</span><br><span class="line"><span class="keyword">delete</span> trees[<span class="number">3</span>];</span><br><span class="line">trees.<span class="property">length</span> = <span class="number">0</span></span><br></pre></td></tr></table></figure><ol start="15"><li><a href="https://zh.javascript.info/new-function">new Function</a></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getFunc</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> value = <span class="string">&quot;test&quot;</span>;</span><br><span class="line">  <span class="keyword">let</span> func = <span class="keyword">new</span> <span class="title class_">Function</span>(<span class="string">&#x27;alert(value)&#x27;</span>);</span><br><span class="line">  <span class="keyword">return</span> func;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">getFunc</span>()(); <span class="comment">// error: value is not defined</span></span><br></pre></td></tr></table></figure><ol start="16"><li>String.prototype.flat</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ES6</span></span><br><span class="line">[<span class="number">1</span>, [<span class="number">2</span>, [<span class="number">3</span>]]].<span class="title function_">flat</span>(<span class="number">2</span>)  <span class="comment">// [1, 2, 3]</span></span><br><span class="line"><span class="comment">// ES3/5</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">flatten</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> result = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = arr.<span class="property">length</span>; i &lt; len; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title class_">Array</span>.<span class="title function_">isArray</span>(arr[i])) &#123;</span><br><span class="line">            result = result.<span class="title function_">concat</span>(<span class="title function_">flatten</span>(arr[i]))</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            result.<span class="title function_">push</span>(arr[i])</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">flatten</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">    <span class="keyword">while</span> (arr.<span class="title function_">some</span>(<span class="function"><span class="params">item</span> =&gt;</span> <span class="title class_">Array</span>.<span class="title function_">isArray</span>(item))) &#123;</span><br><span class="line">        arr = [].<span class="title function_">concat</span>(...arr);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">flatten</span>(<span class="params">arr</span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> arr.<span class="title function_">toString</span>().<span class="title function_">split</span>(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="17"><li>Array.prototype.sort</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="string">&#x27;12&#x27;</span>, <span class="string">&#x27;22&#x27;</span>, <span class="string">&#x27;13&#x27;</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="string">&#x27;3&#x27;</span>];</span><br><span class="line">arr.<span class="title function_">sort</span>() <span class="comment">// [1, &#x27;12&#x27;, &#x27;13&#x27;, 2, &#x27;22&#x27;, &#x27;3&#x27;]</span></span><br><span class="line">arr.<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a-b) <span class="comment">// [1, 2, &#x27;3&#x27;, &#x27;12&#x27;, &#x27;13&#x27;, &#x27;22&#x27;]</span></span><br></pre></td></tr></table></figure><ol start="18"><li><a href="https://juejin.cn/post/6844903924512587783">Math.random</a></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// random color</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">random</span>().<span class="title function_">toString</span>(<span class="number">16</span>).<span class="title function_">slice</span>(<span class="number">4</span>,<span class="number">10</span>)</span><br><span class="line"><span class="comment">// random string</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">random</span>().<span class="title function_">toString</span>(<span class="number">36</span>).<span class="title function_">substr</span>(<span class="number">2</span>)</span><br><span class="line"><span class="comment">// random number in specified range</span></span><br><span class="line"><span class="keyword">const</span> max = <span class="number">100</span></span><br><span class="line"><span class="keyword">const</span> min = <span class="number">10</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">random</span>() * (max - min) + min</span><br><span class="line"><span class="comment">// random order</span></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;E&#x27;</span>, <span class="string">&#x27;F&#x27;</span>, <span class="string">&#x27;G&#x27;</span>]</span><br><span class="line">arr.<span class="title function_">sort</span>(<span class="function">() =&gt;</span> <span class="title class_">Math</span>.<span class="title function_">random</span>() - <span class="number">0.5</span>)</span><br></pre></td></tr></table></figure><ol start="19"><li>JSON.stringify/parse</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">b</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">c</span>: <span class="number">3</span>,</span><br><span class="line">  <span class="attr">d</span>: [<span class="string">&#x27;34&#x27;</span>,<span class="string">&#x27;45&#x27;</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">JSON</span>.<span class="title function_">stringify</span>(obj) <span class="comment">// JSON.stringify(obj)</span></span><br><span class="line"><span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="string">&#x27;&#123;&quot;a&quot;:1,&quot;b&quot;:2,&quot;c&quot;:3,&quot;d&quot;:[&quot;34&quot;,&quot;45&quot;]&#125;&#x27;</span>) <span class="comment">// &#123;a: 1, b: 2, c: 3, d: Array(2)&#125;</span></span><br></pre></td></tr></table></figure><ol start="20"><li>Array.prototype.filter</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="literal">undefined</span>, <span class="literal">null</span>, <span class="string">&quot;&quot;</span>, <span class="number">0</span>, <span class="literal">false</span>, <span class="title class_">NaN</span>, <span class="number">1</span>, <span class="number">2</span>].<span class="title function_">filter</span>(<span class="title class_">Boolean</span>); <span class="comment">// [1, 2]</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>正则表达式</title>
      <link href="/1be46e80-4ac9-11ec-86dc-bd39d87b155a/"/>
      <url>/1be46e80-4ac9-11ec-86dc-bd39d87b155a/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>内置对象</title>
      <link href="/150da360-4ac9-11ec-a3d9-9bb136c8315f/"/>
      <url>/150da360-4ac9-11ec-a3d9-9bb136c8315f/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>变量和作用域</title>
      <link href="/bdaaba40-4ac8-11ec-8426-4f20a6ca48e1/"/>
      <url>/bdaaba40-4ac8-11ec-8426-4f20a6ca48e1/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>原型链</title>
      <link href="/b2523790-4ac8-11ec-a561-1f759942c09b/"/>
      <url>/b2523790-4ac8-11ec-a561-1f759942c09b/</url>
      
        <content type="html"><![CDATA[<h3 id="prototype"><a href="#prototype" class="headerlink" title="prototype"></a>prototype</h3><p>proto n. 原型；样机；典型<br>prototype n. （新型汽车、机器等的）原型，雏形；</p><h3 id="函数-Function"><a href="#函数-Function" class="headerlink" title="函数 Function"></a>函数 Function</h3><p>一般函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>)&#123;&#125;</span><br></pre></td></tr></table></figure><p>匿名函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;</span><br></pre></td></tr></table></figure><p>动态函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> minus = <span class="keyword">new</span> <span class="title class_">Function</span>(<span class="string">&#x27;a,b&#x27;</span>, <span class="string">&#x27;return a-b&#x27;</span>)</span><br><span class="line"><span class="title function_">minus</span>(<span class="number">3</span>, <span class="number">2</span>) <span class="comment">//1</span></span><br></pre></td></tr></table></figure><h3 id="对象-Object"><a href="#对象-Object" class="headerlink" title="对象 Object"></a>对象 Object</h3><p>一切起源都是 Object，一切归宿都是 Object.prototype</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Object</span>() 等同于 &#123;&#125;</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Object</span>(<span class="literal">null</span>) === <span class="literal">null</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Object</span>(<span class="literal">undefined</span>) === <span class="literal">undefined</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Object</span>(<span class="number">123</span>) 等同于 <span class="keyword">new</span> <span class="title class_">Number</span>(<span class="number">123</span>)</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Object</span>(<span class="string">&#x27;hello&#x27;</span>) 等同于  <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&#x27;123&#x27;</span>)</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Object</span>(<span class="title class_">String</span>) === <span class="title class_">String</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Object</span>(<span class="title class_">Date</span>) === <span class="title class_">Date</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Object</span>(<span class="title class_">Math</span>) === <span class="title class_">Math</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Object</span>(<span class="title class_">Function</span>) === <span class="title class_">Function</span></span><br></pre></td></tr></table></figure><h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Date</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">RegExp</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">String</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Number</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Array</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Object</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Boolean</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Function</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Error</span></span><br><span class="line"><span class="comment">// -------------------------</span></span><br><span class="line"><span class="keyword">new</span> <span class="keyword">class</span>&#123;&#125;</span><br><span class="line"><span class="keyword">new</span> <span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Symbol</span> <span class="comment">// Uncaught TypeError: Symbol is not a constructor</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Math</span> <span class="comment">// VM2939:1 Uncaught TypeError: Math is not a constructor</span></span><br></pre></td></tr></table></figure><h3 id="关系图"><a href="#关系图" class="headerlink" title="关系图"></a>关系图</h3><p>instance<br>class/function<br>object.prototype</p><p>字面量 vs 对象实例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// String</span></span><br><span class="line"><span class="keyword">const</span> str = <span class="string">&#x27;123&#x27;</span></span><br><span class="line"><span class="keyword">const</span> trs = <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&#x27;123&#x27;</span>)</span><br><span class="line"><span class="keyword">typeof</span> str === <span class="string">&#x27;string&#x27;</span></span><br><span class="line"><span class="keyword">typeof</span> trs === <span class="string">&#x27;object&#x27;</span></span><br><span class="line">str <span class="keyword">instanceof</span> <span class="title class_">String</span> === <span class="literal">false</span></span><br><span class="line">trs <span class="keyword">instanceof</span> <span class="title class_">String</span> === <span class="literal">true</span></span><br><span class="line">str.<span class="property">__proto__</span> === <span class="title class_">String</span>.<span class="property"><span class="keyword">prototype</span></span></span><br><span class="line">trs.<span class="property">__proto__</span> === <span class="title class_">String</span>.<span class="property"><span class="keyword">prototype</span></span></span><br><span class="line"><span class="comment">// Function</span></span><br><span class="line"><span class="keyword">const</span> fuc = <span class="keyword">new</span> <span class="title class_">Function</span>(<span class="string">&#x27;a,b&#x27;</span>, <span class="string">&#x27;return a+b&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> ucf = <span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line"><span class="keyword">const</span> cuf = <span class="keyword">new</span> <span class="title function_">ucf</span>()</span><br><span class="line">fuc.<span class="property">__proto__</span> === <span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span></span><br><span class="line">ucf.<span class="property">__proto__</span> === <span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span></span><br><span class="line">cuf.<span class="property">__proto__</span> === ucf.<span class="property"><span class="keyword">prototype</span></span></span><br><span class="line">ucf.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">__proto__</span> === <span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span></span><br><span class="line"><span class="keyword">typeof</span> fuc === <span class="string">&#x27;function&#x27;</span></span><br><span class="line"><span class="keyword">typeof</span> ucf === <span class="string">&#x27;function&#x27;</span></span><br><span class="line"><span class="keyword">typeof</span> cuf === <span class="string">&#x27;object&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Funcs</span> &#123;&#125;</span><br><span class="line"><span class="keyword">typeof</span> <span class="title class_">Funcs</span> === <span class="string">&#x27;function&#x27;</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="keyword">new</span> <span class="title class_">Funcs</span> === <span class="string">&#x27;object&#x27;</span></span><br><span class="line"><span class="title class_">Funcs</span>.<span class="property">__proto__</span> === <span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Object</span></span><br><span class="line"><span class="keyword">const</span> conf = &#123;&#125;</span><br><span class="line"><span class="keyword">typeof</span> conf === <span class="string">&#x27;object&#x27;</span></span><br><span class="line">conf <span class="keyword">instanceof</span> <span class="title class_">Object</span> === <span class="literal">true</span></span><br><span class="line">conf.<span class="property">__proto__</span> === <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">__proto__</span> === <span class="literal">null</span></span><br></pre></td></tr></table></figure><p>字面量是一种特殊的「对象」，也是有「构造函数」的，弄清楚实例和构造函数也就弄清楚了「原型链」。(同父异母的兄弟姐妹)</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>数据类型</title>
      <link href="/0cfb35c0-49de-11ec-89f9-49447d13d736/"/>
      <url>/0cfb35c0-49de-11ec-89f9-49447d13d736/</url>
      
        <content type="html"><![CDATA[<h4 id="导读"><a href="#导读" class="headerlink" title="导读"></a>导读</h4><!-- toc --><p>!!! note “按语”<br>    数据类型是JavaScript核心的基础知识点，碎片文章比较多但不够全面，关于一些疑难点也并无总结，对于新同学上手而言往往是云里雾里。本文全面剖析且言简意赅，希望读者喜欢。</p><h3 id="为什么学习编程语言的数据类型？"><a href="#为什么学习编程语言的数据类型？" class="headerlink" title="为什么学习编程语言的数据类型？"></a>为什么学习编程语言的数据类型？</h3><p>我们知道计算机程序=算法+数据结构，数据结构是指相互之间存在一种或多种特定关系的数据元素的集合。数据类型就是数据元素的一种组织形式，学习和理解数据类型对我们编写高质量的程序至关重要。</p><h3 id="JavaScript-的数据类型有哪些？"><a href="#JavaScript-的数据类型有哪些？" class="headerlink" title="JavaScript 的数据类型有哪些？"></a>JavaScript 的数据类型有哪些？</h3><p>最新的 ECMAScript 标准定义了 8 种数据类型: <strong>undefined</strong>、 <strong>boolean</strong>、 <strong>number</strong>、 <strong>string</strong>、 <strong>bingint</strong>、 <strong>symbol</strong>、 <strong>null</strong>、 <strong>object</strong>，其中除了 object 之外都是基本数据类型。</p><p>如果想判断变量的数据类型，可以借助 JavaScript 语法提供的 <strong>typeof</strong> 关键字。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typeof</span> <span class="literal">undefined</span> === <span class="string">&#x27;undefined&#x27;</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="literal">true</span> ===<span class="string">&#x27;boolean&#x27;</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="number">2021</span> === <span class="string">&#x27;number&#x27;</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="string">&#x27;hello&#x27;</span> === <span class="string">&#x27;string&#x27;</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="title class_">BigInt</span>(<span class="number">1</span>) === <span class="string">&#x27;bigint&#x27;</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="title class_">Symbol</span>(<span class="number">2</span>) === <span class="string">&#x27;symbol&#x27;</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="literal">null</span> === <span class="string">&#x27;object&#x27;</span>            <span class="comment">// 注意是 object 而不是 null</span></span><br><span class="line"><span class="keyword">typeof</span> &#123;&#125; === <span class="string">&#x27;object&#x27;</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="keyword">function</span>(<span class="params"></span>)&#123;&#125; === <span class="string">&#x27;function&#x27;</span>  <span class="comment">// 注意是 function 而不是 object</span></span><br></pre></td></tr></table></figure><p>细心的同学不难发现上述代码的运行结果有两个“疑点”：</p><ol><li> null 的数据类型竟然不是 null 而是 object :question:</li><li> 按照 ECMAScript 定义的数据类型并不包括 function 而 typeof 竟然返回了 function :question:</li></ol><p>我们来看下第一个问题，<a href="https://tc39.es/ecma262/#sec-terms-and-definitions-null-type">官方</a>是这么定义的：</p><blockquote><p>4.4.16 Null type<br>type whose sole value is the null value</p></blockquote><p>这句话的意思一个被赋值 null 的变量的数据类型是 null，用代码表示就是：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="literal">null</span></span><br><span class="line"><span class="keyword">typeof</span> a === <span class="string">&#x27;null&#x27;</span></span><br></pre></td></tr></table></figure><p>但实际上是运行结果如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="literal">null</span></span><br><span class="line"><span class="keyword">typeof</span> a === <span class="string">&#x27;undefined&#x27;</span></span><br></pre></td></tr></table></figure><p>换句话说 null 是理论上的基本数据类型之一，但在实际中并未被执行，多个文章都将其描述为“<a href="https://2ality.com/2013/10/typeof-null.html">历史原因</a>”所致，有兴趣可以自行阅读。如果没有时间阅读也可以参考 MDN 的描述：</p><blockquote><p>在 JavaScript 最初的实现中，JavaScript 中的值是由一个表示类型的标签和实际数据值表示的。对象的类型标签是 0。由于 null 代表的是空指针（大多数平台下值为 0x00），因此，null 的类型标签是 0，typeof null 也因此返回 “object”。</p></blockquote><p>再来看下第二个问题，为什么 typeof 返回了一个不在定义范围内的数据类型，经过查阅 ecma262 标准得出了答案，总结如下：</p><ol><li> JavaScript 一切都是对象，而 function 也是 object 的一种。</li><li> 如何区分 function object 还是 normal object，是需要看 object 有没有实现 [[Call]] 这个内置方法，具体<a href="https://tc39.es/ecma262/#sec-ecmascript-function-objects-call-thisargument-argumentslist">参考</a>。</li><li> typeof 在计算 object 类型时会检查  [[Call]] 内置方法是否被实现，实现了返回 function 没实现则返回 object。</li></ol><table style="margin:0 30%;"><tbody>  <tr>    <th>Type of <var>val</var></th>    <th>Result</th>  </tr>  <tr>    <td>Undefined</td>    <td><emu-val>"undefined"</emu-val></td>  </tr>  <tr>    <td>Null</td>    <td><emu-val>"object"</emu-val></td>  </tr>  <tr>    <td>Boolean</td>    <td><emu-val>"boolean"</emu-val></td>  </tr>  <tr>    <td>Number</td>    <td><emu-val>"number"</emu-val></td>  </tr>  <tr>    <td>String</td>    <td><emu-val>"string"</emu-val></td>  </tr>  <tr>    <td>Symbol</td>    <td><emu-val>"symbol"</emu-val></td>  </tr>  <tr>    <td>BigInt</td>    <td><emu-val>"bigint"</emu-val></td>  </tr>  <tr>    <td>Object (does not implement [[Call]])</td>    <td><emu-val>"object"</emu-val></td>  </tr>  <tr>    <td>Object (implements [[Call]])</td>    <td><emu-val>"function"</emu-val></td>  </tr></tbody></table><h3 id="辨别不同的对象类型"><a href="#辨别不同的对象类型" class="headerlink" title="辨别不同的对象类型"></a>辨别不同的对象类型</h3><p>我们根据 typeof 运算符可以识别基本数据类型，但是 object 对象有很多，比如 Array、Date、Number、Map、Set等等。如何识别这些对象类型靠 typeof 已经无法满足要求，基础扎实的同学还能想到 instanceof 来判断对象实例是不是属于某个类(对象)。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="keyword">let</span> b = <span class="keyword">new</span> <span class="title class_">Map</span></span><br><span class="line">a <span class="keyword">instanceof</span> <span class="title class_">Array</span>  <span class="comment">// true</span></span><br><span class="line">b <span class="keyword">instanceof</span> <span class="title class_">Map</span>    <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>这种方法可以对某个类型做具体的判断更为合适，比如判断某个变量是不是数组。不然，每次将不断枚举所有类型执行效率非常低。</p><p>善于学习的同学们肯定发现了可以通过 object.toString() 来判断，比如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123; <span class="attr">a</span>: <span class="number">1</span>&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="title function_">toString</span>())     <span class="comment">// [object Object]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">toString</span>())    <span class="comment">// [object Math]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">JSON</span>.<span class="title function_">toString</span>())    <span class="comment">// [object JSON]</span></span><br></pre></td></tr></table></figure><p>toString 方法都是集成 Object 对象而来，不过有的对象已经将该方法重写，比如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Map</span>.<span class="title function_">toString</span>())     <span class="comment">// function Map() &#123; [native code] &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Date</span>.<span class="title function_">toString</span>())    <span class="comment">// function Date() &#123; [native code] &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Symbol</span>.<span class="title function_">toString</span>())  <span class="comment">// function Symbol() &#123; [native code] &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Array</span>.<span class="title function_">toString</span>())   <span class="comment">// function Array() &#123; [native code] &#125;</span></span><br></pre></td></tr></table></figure><p>所以我们可以直接使用 Object.toString 方法来实现，代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>([])                 <span class="comment">// [object Array]</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="number">1</span>)                  <span class="comment">// [object Number]</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="string">&#x27;abc&#x27;</span>)              <span class="comment">// [object String]</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="literal">true</span>)               <span class="comment">// [object Boolean]</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="literal">undefined</span>)          <span class="comment">// [object Undefined]</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="title class_">Symbol</span>(<span class="number">2</span>))          <span class="comment">// [object Symbol]</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(&#123;&#125;)                 <span class="comment">// [object Object]</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="keyword">new</span> <span class="title class_">Date</span>)           <span class="comment">// [object Date]</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;)       <span class="comment">// [object Function]</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="keyword">new</span> <span class="title class_">Set</span>)            <span class="comment">// [object Set]</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="keyword">new</span> <span class="title class_">Map</span>)            <span class="comment">// [object Map]</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">&#x27;\s&#x27;</span>))   <span class="comment">// [object RegExp]</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="title class_">Math</span>)               <span class="comment">// [object Math]</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="keyword">function</span>*()&#123;&#125;)      <span class="comment">// [object GeneratorFunction]</span></span><br></pre></td></tr></table></figure><p>这些代码稍微改造就可以直接得到具体的对象类型：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>([]).<span class="title function_">match</span>(<span class="regexp">/(?!\s)\S+(?=])/</span>)[<span class="number">0</span>] <span class="comment">// Array</span></span><br></pre></td></tr></table></figure><p>有同学比较好奇 <var>Object.toString</var> 为何如此神通广大，里面到底有什么摩斯密码 :question:</p><p>想弄清楚这个问题就要了解 <var><a href="https://tc39.es/ecma262/#sec-tostring">Symbol.toStringTag</a></var></p><h3 id="数据类型常见的考查方式有哪些？"><a href="#数据类型常见的考查方式有哪些？" class="headerlink" title="数据类型常见的考查方式有哪些？"></a>数据类型常见的考查方式有哪些？</h3><ol><li> 题目1</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typeof</span> <span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;       <span class="comment">// object || function ✔️</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="keyword">new</span> <span class="title class_">Function</span>       <span class="comment">// object ✔️ || function</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="keyword">new</span> <span class="title class_">Array</span>          <span class="comment">// object ✔️ || array || function</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="keyword">class</span> <span class="title class_">A</span> &#123;&#125;         <span class="comment">// object || function ✔️</span></span><br></pre></td></tr></table></figure><ol start="2"><li> 题目2</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typeof</span> <span class="title class_">NaN</span>              <span class="comment">// undefined || null || number ✔️</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="title class_">Infinity</span>         <span class="comment">// undefined || null || number ✔️</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="keyword">new</span> <span class="title class_">Number</span>()     <span class="comment">// number || object ✔️</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="title class_">Number</span>()         <span class="comment">// number ✔️ || object</span></span><br></pre></td></tr></table></figure><ol start="3"><li> 题目3</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typeof</span> (<span class="keyword">typeof</span> <span class="number">1</span>)  <span class="comment">// undefined || string ✔️</span></span><br></pre></td></tr></table></figure><ol start="4"><li> 题目4</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typeof</span> (<span class="keyword">typeof</span> <span class="number">1</span>)  <span class="comment">// undefined || string</span></span><br></pre></td></tr></table></figure><h3 id="如何深入理解数据类型转换？"><a href="#如何深入理解数据类型转换？" class="headerlink" title="如何深入理解数据类型转换？"></a>如何深入理解数据类型转换？</h3><ol><li> 初识 Symbol.toStringTag</li><li> 理解 Object.prototype.toString</li><li> 理解 [Instance].prototype.toString</li></ol><ul><li>  <a href="https://zhuanlan.zhihu.com/p/118793721">https://zhuanlan.zhihu.com/p/118793721</a></li><li>  <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toStringTag">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toStringTag</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 基础知识 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
